import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

class DataPrepKit:
    def __init__(self, data):
        self.data = data

    # Data Reading
    @staticmethod
    def read_data(file_path, file_type):
        if file_type == 'csv':
            return pd.read_csv(file_path)
        elif file_type == 'excel':
            return pd.read_excel(file_path)
        elif file_type == 'json':
            return pd.read_json(file_path)
        else:
            print("Unsupported file type")
            return None

    # Data Summary
    def data_summary(self):
        return self.data.describe(include='all')

    # Handling Missing Values
    def handle_missing_values(self, strategy):
        if strategy == 'drop':
            return self.data.dropna()
        elif strategy == 'mean':
            return self.data.fillna(self.data.mean())
        else:
            print("Unsupported strategy")
            return None

    # Categorical Data Encoding
    def encode_categorical_data(self):
        le = LabelEncoder()
        for column in self.data.columns:
            if self.data[column].dtype == 'object':
                self.data[column] = le.fit_transform(self.data[column])
        return self.data


#########################################################################################
an example to use the code above:

# Import the necessary libraries
import pandas as pd
from sklearn.datasets import load_iris

# Load a sample dataset
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

# Initialize the DataPrepKit class with the iris dataset
data_prep = DataPrepKit(iris_df)

# Get a summary of the data
summary = data_prep.data_summary()
print(summary)

# Handle missing values by dropping them
data_no_missing_values = data_prep.handle_missing_values('drop')

# Encode categorical data
encoded_data = data_prep.encode_categorical_data()
